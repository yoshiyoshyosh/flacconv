#!/bin/sh

# flacconv 1.2.1 // use https://github.com/yoshiyoshyosh/flacconv for issues

set -euf
TAB="$(printf '\t')"
VTAB="$(printf '\v')" # need a really obscure control character for IFS shenanigans
NL='
'
BN="${0##*/}"
POSIXLY_CORRECT=1

errecho() {
	>&2 echo "$@"
}

fail() {
	errecho "error: $BN: $*"
	exit 1
}

warn() {
	errecho "warning: $BN: $*"
	if [ -z "$IGNOREWARNINGS" ]; then
		errecho 'you can ignore stopping for warnings in the future with -i'
		errecho 'press enter to continue, or C-v to quit'
		read -r __
	fi
}

_tempdir() {
	set +u
	[ "$TMPDIR" ] || \
	{ [ "$TEMP" ] && TMPDIR="$TEMP"; } || \
	{ [ "$TMP" ] && TMPDIR="$TMP"; } || \
	{ [ -d "/tmp" ] && TMPDIR="/tmp"; } || \
	{ [ -d "/var/tmp" ] && TMPDIR="/var/tmp"; } || \
	{ [ -d "/usr/tmp" ] && TMPDIR="/usr/tmp"; } || \
	TMPDIR="$PWD"
	set -u
}

checkupdate() {
	errecho 'checking for updates...'
	if curl -s https://raw.githubusercontent.com/yoshiyoshyosh/flacconv/main/flacconv | cmp -s "$0" -; then
		errecho 'your script is updated to the latest version!'
	else
		errecho 'your script differs from remote!'
		errecho 'if this is unintentional, download the newest version from:'
		errecho 'https://raw.githubusercontent.com/yoshiyoshyosh/flacconv/main/flacconv'
	fi
	exit 0
}

metaflac() { command metaflac --no-utf8-convert "$@"; } # don't wanna fuck up any tags from locale shit

convwarn() { errecho "an error occured while encoding $infile, skipping and not deleting" && err=1 && DELETE= ; }

_opusenc() {
	opusenc --discard-comments \
		$opustags \
		${pic:+--picture${VTAB}"${pic}"} \
		--bitrate "${BITRATE}k" \
		"$infile" \
		"${infile%.*}.opus"
}

_mp3enc() {
	flac --decode --stdout "$infile" | lame \
		-q 0 \
		${cbr:--V${VTAB}"${VLVL}"} \
		--add-id3v2 \
		--tt "${title#*=}" \
		--ta "${artist#*=}" \
		--tl "${album#*=}" \
		--ty "${year#*=}" \
		--tn "${tracknumber#*=}" \
		--tg "${genre#*=}" \
		--tc "${comment#*=}" \
		--tv "TPE2=${albumartist#*=}" \
		${pic:+--ti${VTAB}"${pic}"} \
		- \
		"${infile%.*}.mp3"
}

# some code reused from https://gist.github.com/berturion/5377d6653ef93049f4ff54cff2003e11#file-flac2opus-sh
process_file() {
	infile="$1"
	bname="${infile##*/}"
	# tagnames will be used for all non-metaflac operations, as it allows for multiline comment shit
	tagnames="$(metaflac --export-tags-to=- "$infile" | grep -F '=' | cut -d '=' -f 1)"

	# check if flac has a picture, if not, set RMPIC
	metaflac --export-picture-to=- "$infile" 1>/dev/null 2>&1 || RMPIC=1

	# first detect any potential ID3 tags
	head_bytes="$(dd if="$infile" of=/dev/stdout bs=1 count=3 2>/dev/null)"
	if [ "$head_bytes" = "ID3" ]; then
		warn "invalid id3 tags found in $infile, you should get that fixed!"
		# in a previous version this would remove invalid id3 tags automatically
		# I have since realized that this is outside the scope of this program
		# additionally, some people may have tags only in the id3 values, and as
		# such would be lost forever if removed automatically
		# therefore, this script only detects id3 tags and alterts the user
	fi

	# now test if keepkeys or whatever was used, set exported tags
	if [ "$KEEPKEYS" ]; then
		tagnames="$(printf '%s' "$tagnames" | grep -i -E "^$KEEPKEYS")"
	fi
	if [ "$REMOVEKEYS" ]; then
		[ "$REMOVEKEYS" = "ALL" ] && REMOVEKEYS=''
		tagnames="$(printf '%s' "$tagnames" | grep -v -i -E "^$REMOVEKEYS")"
	fi

	# export pic if we're keeping it
	if [ -z "$RMPIC" ]; then
		pic="$TMPDIR/${bname%.*}_IMG"
		metaflac --export-picture-to="$pic" "$infile"
	fi

	# time to encode
	IFS="$VTAB"
	if [ "$TYPE" = "opus" ]; then
		VLVL=
		opustags=""
		# build opus comment chain, can't "import" tags like with flac
		[ "$tagnames" ] && while read -r name; do
			opustags="${opustags:+${opustags}${VTAB}}--comment${VTAB}$(metaflac --show-tag="$name" "$infile")"
		done <<-EOF
			$tagnames
		EOF
		if [ "$VERBOSE" ]; then
			_opusenc || convwarn
		else
			_opusenc 1>/dev/null 2>&1 || convwarn
		fi
	else
		album="$(metaflac --show-tag=album "$infile")"
		artist="$(metaflac --show-tag=artist "$infile")"
		albumartist="$(metaflac --show-tag=albumartist "$infile")"
		title="$(metaflac --show-tag=title "$infile")"
		year="$(metaflac --show-tag=date "$infile")"
		genre="$(metaflac --show-tag=genre "$infile")"
		tracknumber="$(metaflac --show-tag=tracknumber "$infile")"
		comment="$(metaflac --show-tag=comment "$infile")"

		[ "$VLVL" ] || cbr="-b${VTAB}$BITRATE${VTAB}--cbr"
		if [ "$VERBOSE" ]; then
			_mp3enc || convwarn
		else
			_mp3enc 1>/dev/null 2>&1 || convwarn
		fi
	fi
	[ "${pic:-}" ] && rm -f "$pic"
	[ -z "${err:-}" ] && echo "$infile successfully converted to $TYPE with bitrate/quality ${VLVL:-${BITRATE}k}"
	[ -z "$DELETE" ] || rm -f "$infile"
}

usage() {
	errecho \
"usage: $BN [-huvVip3] [-b BITRATE] [-l LEVEL] [-k KEYS] [-r KEYS] [-j THREADS] [--] [DIRECTORY...]
$BN recursively converts directories of flac files to opus/mp3
DIRECTORY can be specified multiple times. if omitted, the current directory is used
by default, this script outputs opus with variable bitrate 128k
IF ENCODING TO MP3, -k AND -r WILL NOT WORK. the only metadata that will be kept is the following:
  TITLE, ARTIST, ALBUM, ALBUMARTIST, DATE, GENRE, TRACKNUMBER, COMMENT, and the cover picture
(blame id3. just use opus)

 -h           show script help
 -u           check for updates
 -v           verbose output (messy with multithreading)
 -V           very verbose output (VERY messy, use only for debugging and with like, -j 1)
 -i           ignore script-stopping warnings
 -d           delete original flac files after transcoding
 -3           switch output filetype to mp3
 -b <BITRATE> output bitrate in kbits (default 128)
              this value is variable for opus & CBR for mp3
 -l <LEVEL>   mp3 only: use specified mp3 variable quality (0-9). integer only
              OVERRIDES -b
 -k <KEYS>    keep specified flac metadata KEYS in output file
              keys can be checked with metaflac --export-tags-to=- FILE
              option argument is a PIPE-separated list of keys to keep, case-insensitive
              (i.e. -k 'artist|title|albumartist|album|date')
              if both -k and -r are not present, all keys are kept.
 -r <KEYS>    remove specified flac metadata KEYS in output file
              option argument is of the same format as -k
              if set to 'ALL', all keys are removed
 -p           remove embedded picture in output files
 -j <THREADS> use the specified amount of threads for parallel processing
              if omitted, CPU core count will be used"
}

VERBOSE=
REALLYVERBOSE=
DELETE=
TYPE=opus
BITRATE=128
VLVL=
RMPIC=
KEEPKEYS=
REMOVEKEYS=
IGNOREWARNINGS=
THREADS="$(getconf _NPROCESSORS_ONLN 2>/dev/null || getconf NPROCESSORS_ONLN)" # linux & freebsd compat I think
_tempdir # set temp dir

while getopts :huvVid3pb:l:k:r:j: OPT; do
	case "$OPT" in
		h) usage && exit 0 ;;
		u) checkupdate ;;
		v) VERBOSE=1 ;;
		V) VERBOSE=1; REALLYVERBOSE=1 ;;
		i) IGNOREWARNINGS=1 ;;
		d) DELETE=1 ;;
		3) TYPE=mp3 ;;
		p) RMPIC=1 ;;
		b) BITRATE="$OPTARG" ;;
		l) VLVL="$OPTARG" ;;
		k) KEEPKEYS="$OPTARG" ;;
		r) REMOVEKEYS="$OPTARG" ;;
		j) THREADS="$OPTARG" ;;
		*) fail "unknown option: -$OPTARG. run $BN -h to see all options" ;;
	esac
done
shift "$((OPTIND - 1))"

[ "$REALLYVERBOSE" ] && set -x
command -v metaflac 1>/dev/null 2>&1 || fail 'flac tools are not installed! (metaflac)'
[ $TYPE = "mp3" ] && { command -v lame 1>/dev/null 2>&1 || fail 'lame is not installed!' ; }
[ $TYPE = "opus" ] && { command -v opusenc 1>/dev/null 2>&1 || fail 'opus-tools is not installed! (opusenc)' ; }

{ [ "$KEEPKEYS" ] && [ "$REMOVEKEYS" ]; } && fail 'don'\''t use -k and -r in the same call!'

# this script assumes you aren't using newlines in path names
# I do not want to change it to account for this
# you should never put newlines in paths
# it is a very bad idea for many programs
FLACFILES="$(find "$@" -type f -name "*.flac")"
[ "$FLACFILES" ] || fail 'no flac files found!'

# make a fifo/fd for parallel stuff
mk_parallel_fd() {
	fifo_para="$(mktemp -u "$TMPDIR/flacconvXXXX")"
	mkfifo "$fifo_para"
	exec 9<>"$fifo_para"
	rm -f "$fifo_para"
	while [ "$THREADS" -gt 0 ]; do
		printf "\n" >&9 # start with THREADS amount of lines in fd 9 for later
		THREADS="$((THREADS - 1))"
	done
}

# read each line from fd 9, launch new program for each line
# print a line after program finished such that another one can take its place
run_in_parallel() {
	cmd="$1"
	shift
	read -r __ <&9
	{
		"$cmd" "$@"
		printf '\n' >&9
	} &
}

test_2() {
	echo "$*"
	sleep 5
}

mk_parallel_fd
while read -r file; do
	run_in_parallel process_file "$file" 
done <<-EOF
	$FLACFILES
EOF

wait
